[gd_scene load_steps=45 format=2]

[ext_resource path="res://Mobs/Player/Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://Assets/Props/grass02.png" type="Texture" id=2]
[ext_resource path="res://Assets/Props/rock02.png" type="Texture" id=3]
[ext_resource path="res://Assets/Props/tree01.png" type="Texture" id=4]
[ext_resource path="res://Assets/Props/tree02.png" type="Texture" id=5]
[ext_resource path="res://Assets/Props/rock01.png" type="Texture" id=6]
[ext_resource path="res://Assets/Props/Barrel.png" type="Texture" id=7]
[ext_resource path="res://Assets/Props/grass.png" type="Texture" id=8]
[ext_resource path="res://Assets/Props/explosiveBarrel.png" type="Texture" id=9]
[ext_resource path="res://Assets/Props/Bush02.png" type="Texture" id=10]
[ext_resource path="res://Assets/Props/chandelier.png" type="Texture" id=11]
[ext_resource path="res://Assets/Props/candelier02.png" type="Texture" id=12]
[ext_resource path="res://Assets/Props/Chains03.png" type="Texture" id=13]
[ext_resource path="res://Assets/Props/Bush01.png" type="Texture" id=14]
[ext_resource path="res://Assets/Props/Chains01.png" type="Texture" id=15]
[ext_resource path="res://Assets/Props/Chains02.png" type="Texture" id=16]
[ext_resource path="res://Assets/Textures/pixil-frame-0(7).png" type="Texture" id=17]
[ext_resource path="res://Assets/Textures/imageonline-co-pixelated(2).png" type="Texture" id=18]
[ext_resource path="res://Assets/Textures/imageonline-co-pixelated(4).png" type="Texture" id=19]
[ext_resource path="res://Assets/Textures/imageonline-co-pixelated(1).png" type="Texture" id=20]
[ext_resource path="res://Assets/Textures/imageonline-co-pixelated.png" type="Texture" id=21]
[ext_resource path="res://Assets/Fonts/firacode.ttf" type="DynamicFontData" id=23]
[ext_resource path="res://Scripts/Resume.cs" type="Script" id=24]

[sub_resource type="StreamTexture" id=8]
flags = 23
load_path = "res://.import/imageonline-co-pixelated3.png-58753c56a6dfb4674cf93983074d68e4.s3tc.stex"

[sub_resource type="SpatialMaterial" id=4]
albedo_texture = SubResource( 8 )

[sub_resource type="SpatialMaterial" id=12]
albedo_texture = ExtResource( 18 )

[sub_resource type="SpatialMaterial" id=13]
albedo_texture = ExtResource( 19 )

[sub_resource type="SpatialMaterial" id=14]
albedo_texture = ExtResource( 21 )

[sub_resource type="SpatialMaterial" id=15]
albedo_texture = ExtResource( 17 )

[sub_resource type="SpatialMaterial" id=16]
albedo_texture = ExtResource( 20 )

[sub_resource type="StreamTexture" id=9]
flags = 23
load_path = "res://.import/imageonline-co-pixelated1.png-5a13d11bc7acc9200dbf72393b38eadc.s3tc.stex"

[sub_resource type="SpatialMaterial" id=1]
albedo_texture = SubResource( 9 )
uv1_scale = Vector3( 2, 4, 1.466 )

[sub_resource type="BoxShape" id=17]
extents = Vector3( 0.281531, 0.319793, 0.161273 )

[sub_resource type="StreamTexture" id=10]
flags = 23
load_path = "res://.import/imageonline-co-pixelated4.png-bd8b5b7240b6ff1701c8bed78faff24a.s3tc.stex"

[sub_resource type="SpatialMaterial" id=5]
albedo_texture = SubResource( 10 )

[sub_resource type="SpatialMaterial" id=6]
albedo_texture = SubResource( 10 )

[sub_resource type="SpatialMaterial" id=7]
albedo_texture = SubResource( 10 )

[sub_resource type="StreamTexture" id=11]
flags = 23
load_path = "res://.import/imageonline-co-pixelated2.png-0acadaf5b1e3d762285d5c76a60d7ddc.s3tc.stex"

[sub_resource type="SpatialMaterial" id=2]
albedo_texture = SubResource( 11 )

[sub_resource type="SpatialMaterial" id=3]
albedo_texture = SubResource( 11 )

[sub_resource type="Shader" id=18]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = true;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 1.07; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.1;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.003; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.6; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = false; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 0.07; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.3; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 18 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.4
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = true
shader_param/roll_speed = 1.07
shader_param/roll_size = 15.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.0
shader_param/noise_opacity = 0.1
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = 0.003
shader_param/brightness = 1.6
shader_param/discolor = false
shader_param/warp_amount = 0.07
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.3
shader_param/vignette_opacity = 0.5

[sub_resource type="DynamicFont" id=20]
size = 28
font_data = ExtResource( 23 )

[sub_resource type="DynamicFont" id=21]
size = 18
font_data = ExtResource( 23 )

[node name="DebugMap" type="Spatial"]

[node name="Player" parent="." instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.311138, 1.31148, 0.583661 )
_headNodePath = NodePath("")

[node name="Walls" type="Spatial" parent="."]
transform = Transform( -0.00158827, 0, -0.999999, 0, 1, 0, 0.999999, 0, -0.00158827, 2.7067, 1.07258, 8.5129 )

[node name="wall1" type="CSGBox" parent="Walls"]
transform = Transform( 0.0639227, 0, -0.997955, 0, 1, 0, 0.997955, 0, 0.0639227, -8.15128, 0, 9.36728 )
use_collision = true
height = 6.95414
depth = 5.32256
material = SubResource( 4 )

[node name="wall1" type="CSGBox" parent="Walls/wall1"]
transform = Transform( -0.99997, 0, 0.00787131, 0, 1, 0, -0.00787131, 0, -0.99997, 0.0369654, 0, -6.61622 )
use_collision = true
height = 6.95414
depth = 5.32256
material = SubResource( 4 )

[node name="wall2" type="CSGBox" parent="Walls"]
transform = Transform( -0.999991, 0, 0.00404908, 0, 1, 0, -0.00404908, 0, -0.999991, -12.2885, 0, 6.66051 )
use_collision = true
height = 6.95414
depth = 5.32256
material = SubResource( 12 )

[node name="wall2" type="CSGBox" parent="Walls/wall2"]
transform = Transform( 0.121142, 0, 0.992635, 0, 1, 0, -0.992635, 0, 0.121142, -10.437, 0, 6.65008 )
use_collision = true
height = 6.95414
depth = 5.32256
material = SubResource( 12 )

[node name="wall3" type="CSGBox" parent="Walls"]
transform = Transform( 0.107216, -0.994236, -0.000833515, 0.0116585, 0.000418934, 0.999932, -0.994168, -0.107219, 0.0116362, -8.71222, 0.02144, 15.391 )
use_collision = true
height = 5.52462
depth = 6.82189
material = SubResource( 13 )

[node name="wall4" type="CSGBox" parent="Walls"]
transform = Transform( -0.999955, 0, 0.00945951, 0, 1, 0, -0.00945951, 0, -0.999955, -10.3478, 0, 19.6767 )
use_collision = true
height = 6.95414
depth = 5.32256
material = SubResource( 14 )

[node name="wall4" type="CSGBox" parent="Walls/wall4"]
transform = Transform( 0.107028, 0, -0.994256, 0, 1, 0, 0.994256, 0, 0.107028, -13.2401, 0, -0.421906 )
use_collision = true
height = 6.95414
depth = 5.32256
material = SubResource( 14 )

[node name="wall5" type="CSGBox" parent="Walls/wall4"]
transform = Transform( -0.999955, 0, 0.00945951, 0, 1, 0, -0.00945951, 0, -0.999955, -5.70415, 0, 14.6491 )
use_collision = true
height = 6.95414
depth = 5.32256
material = SubResource( 14 )

[node name="wall4" type="CSGBox" parent="Walls/wall4/wall5"]
transform = Transform( 0.107028, 0, -0.994256, 0, 1, 0, 0.994256, 0, 0.107028, -13.2401, 0, -0.421906 )
use_collision = true
height = 6.95414
depth = 5.32256
material = SubResource( 14 )

[node name="wall5" type="CSGBox" parent="Walls"]
transform = Transform( -0.999897, 0.00158784, 0.0142742, 0.0143074, 0.0233503, 0.999625, 0.00125393, 0.999726, -0.0233706, -10.5727, 0, 25.8471 )
use_collision = true
height = 5.51465
depth = 7.02482
material = SubResource( 15 )

[node name="wall6" type="CSGBox" parent="Walls"]
transform = Transform( -0.999839, 0, -0.017941, 0, 1, 0, 0.017941, 0, -0.999839, -4.62009, 0.14251, 13.7273 )
use_collision = true
height = 6.95414
depth = 5.48792
material = SubResource( 16 )

[node name="wall6" type="CSGBox" parent="Walls/wall6"]
transform = Transform( -0.999839, 0, -0.017941, 0, 1, 0, 0.017941, 0, -0.999839, -5.13318, 0.14251, 0.218811 )
use_collision = true
height = 6.95414
depth = 5.48792
material = SubResource( 16 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.932683, 0.360697, 0, -0.360697, 0.932683, 0, 123.565, 93.937 )
light_energy = 1.514
shadow_enabled = true

[node name="Sol" type="Spatial" parent="."]

[node name="sol" type="CSGBox" parent="Sol"]
use_collision = true
width = 36.1643
height = 0.121397
depth = 39.0209
material = SubResource( 1 )

[node name="sol2" type="CSGBox" parent="Sol"]
transform = Transform( 1, 0, 0, 0, 0.9391, 0.343643, 0, -0.343643, 0.9391, 0, 6.21905, 35.3237 )
use_collision = true
width = 36.1643
height = 0.121397
depth = 39.0209
material = SubResource( 1 )

[node name="sol3" type="CSGBox" parent="Sol"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 12.7316, 72.5843 )
use_collision = true
width = 36.1643
height = 0.121397
depth = 39.0209
material = SubResource( 1 )

[node name="sol4" type="CSGBox" parent="Sol"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -36.053, 0, 0 )
use_collision = true
width = 36.1643
height = 0.121397
depth = 39.0209
material = SubResource( 1 )

[node name="Arbre2" type="Spatial" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 1, -12.1427, 2.68132, -10.751 )

[node name="Texture1" type="Sprite3D" parent="Sol/sol4/Arbre2"]
transform = Transform( 0.0522139, 0, -0.199727, 0, 1, 0, 4.99318, 0, 0.052214, -0.0230522, 0, 9.53674e-07 )
texture = ExtResource( 4 )

[node name="Texture2" type="Sprite3D" parent="Sol/sol4/Arbre2"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.251854 )
texture = ExtResource( 4 )

[node name="Arbre1" type="Spatial" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 7, 0, 0, 0, 1, -8.16547, 3.68236, -10.751 )

[node name="Texture1" type="Sprite3D" parent="Sol/sol4/Arbre1"]
transform = Transform( -0.0326668, 0, -0.199893, 0, 1, 0, 4.99733, 0, -0.0326668, -0.0478296, 0, 0.193196 )
texture = ExtResource( 5 )

[node name="Texture2" type="Sprite3D" parent="Sol/sol4/Arbre1"]
texture = ExtResource( 5 )

[node name="rock 01" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 1, -4.03173, 1.15222, -10.751 )
texture = ExtResource( 6 )

[node name="rock 02" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 1, 0.234135, 1.2335, -10.751 )
texture = ExtResource( 3 )

[node name="barrel" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 3, 0, 0, 0, 3, 0, 0, 0, 1, 5.4439, 1.55758, -10.751 )
texture = ExtResource( 7 )

[node name="StaticBody" type="StaticBody" parent="Sol/sol4/barrel"]

[node name="CollisionShape" type="CollisionShape" parent="Sol/sol4/barrel/StaticBody"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.178143, 0 )
shape = SubResource( 17 )

[node name="grass" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 1, -12.3161, 0.327365, -3.54352 )
texture = ExtResource( 8 )

[node name="grass2" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 1, -8.52204, 0.327365, -3.54352 )
texture = ExtResource( 2 )

[node name="chain" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 1, -5.5658, 2.78265, -3.54352 )
texture = ExtResource( 15 )

[node name="chain2" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 1, -1.7737, 1.87245, -3.54352 )
texture = ExtResource( 16 )

[node name="chain3" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 1, 1.41291, 2.03024, -3.54352 )
texture = ExtResource( 13 )

[node name="chandelier" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 1, 5.27499, 3.04891, -3.54352 )
texture = ExtResource( 11 )

[node name="chandelier02" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 3, 0, 0, 0, 3, 0, 0, 0, 1, -12.3161, 1.6543, 1.63597 )
texture = ExtResource( 12 )

[node name="explosiveBarrel" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 3, 0, 0, 0, 3, 0, 0, 0, 1, -8.27085, 1.55655, 1.55083 )
texture = ExtResource( 9 )

[node name="bush" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 1, -2.98522, 1.2775, 1.57196 )
texture = ExtResource( 14 )

[node name="bush02" type="Sprite3D" parent="Sol/sol4"]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 1, 1.62379, 1.29711, 1.57196 )
texture = ExtResource( 10 )

[node name="Parcours" type="Spatial" parent="."]

[node name="CSGBox" type="CSGBox" parent="Parcours"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 13.3683, 75.4297 )
use_collision = true
material = SubResource( 5 )

[node name="CSGBox2" type="CSGBox" parent="Parcours"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 5.01962, 16.0599, 71.1844 )
use_collision = true
material = SubResource( 6 )

[node name="CSGBox3" type="CSGBox" parent="Parcours"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.278392, 18.9269, 66.3393 )
use_collision = true
material = SubResource( 7 )

[node name="CSGBox4" type="CSGBox" parent="Parcours"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -3.14927, 22.8652, 69.0946 )
use_collision = true
material = SubResource( 7 )

[node name="CSGBox5" type="CSGBox" parent="Parcours"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.994301, 26.1844, 73.0917 )
use_collision = true
material = SubResource( 7 )

[node name="Rampes" type="Spatial" parent="."]

[node name="Rampe1" type="CSGBox" parent="Rampes"]
transform = Transform( 0.862249, 0.158235, 0.481133, 0, 0.949945, -0.312418, -0.506485, 0.269382, 0.819089, 8.26765, 1.08547, 0 )
use_collision = true
width = 6.76224
height = 0.372073
depth = 11.6501
material = SubResource( 2 )

[node name="Rampe2" type="CSGBox" parent="Rampes"]
transform = Transform( -0.870037, -0.154017, -0.468309, 0, 0.949945, -0.312418, 0.492986, -0.271815, -0.826488, 5.90736, 1.08547, -11.1999 )
use_collision = true
width = 6.76224
height = 0.372073
depth = 11.6501
material = SubResource( 3 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]
pause_mode = 2

[node name="MenuPause" type="Control" parent="CanvasLayer"]
pause_mode = 2
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 40.0
margin_bottom = 40.0

[node name="PauseShader" type="ColorRect" parent="CanvasLayer/MenuPause"]
pause_mode = 2
material = SubResource( 19 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = -40.0
margin_bottom = -40.0

[node name="Panneau" type="Panel" parent="CanvasLayer/MenuPause"]
margin_left = 486.975
margin_top = 172.974
margin_right = 786.975
margin_bottom = 547.974

[node name="Elements" type="VBoxContainer" parent="CanvasLayer/MenuPause/Panneau"]
margin_left = 34.0
margin_top = 27.0
margin_right = 269.0
margin_bottom = 343.0

[node name="TitreMenu" type="Label" parent="CanvasLayer/MenuPause/Panneau/Elements"]
margin_right = 235.0
margin_bottom = 35.0
custom_fonts/font = SubResource( 20 )
text = "Pause"
align = 1

[node name="Resume" type="Button" parent="CanvasLayer/MenuPause/Panneau/Elements"]
pause_mode = 2
margin_top = 39.0
margin_right = 235.0
margin_bottom = 68.0
custom_fonts/font = SubResource( 21 )
action_mode = 0
text = "Resume"
script = ExtResource( 24 )

[node name="PixelEffectToggle" type="CheckButton" parent="CanvasLayer/MenuPause/Panneau/Elements"]
margin_top = 72.0
margin_right = 235.0
margin_bottom = 112.0
pressed = true
text = "Pixel Effect"

[node name="MusicPlayingToggle" type="CheckButton" parent="CanvasLayer/MenuPause/Panneau/Elements"]
margin_top = 116.0
margin_right = 235.0
margin_bottom = 156.0
pressed = true
text = "Music"

[node name="FOV" type="Control" parent="CanvasLayer/MenuPause/Panneau/Elements"]
margin_top = 160.0
margin_right = 235.0
margin_bottom = 160.0

[node name="FOV" type="Label" parent="CanvasLayer/MenuPause/Panneau/Elements/FOV"]
visible = false
margin_right = 235.0
margin_bottom = 14.0
text = "FOV"
align = 1

[node name="FOVSlider" type="HSlider" parent="CanvasLayer/MenuPause/Panneau/Elements/FOV"]
visible = false
margin_top = 18.0
margin_right = 235.0
margin_bottom = 34.0
__meta__ = {
"_editor_description_": ""
}

[connection signal="pressed" from="CanvasLayer/MenuPause/Panneau/Elements/Resume" to="Player" method="UnPause"]
[connection signal="pressed" from="CanvasLayer/MenuPause/Panneau/Elements/PixelEffectToggle" to="Player" method="SwitchPixelShader"]
[connection signal="pressed" from="CanvasLayer/MenuPause/Panneau/Elements/MusicPlayingToggle" to="Player" method="SwitchMusicPlayer"]
